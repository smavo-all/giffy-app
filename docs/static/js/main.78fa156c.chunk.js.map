{"version":3,"sources":["logo.svg","Components/Gif.js","Components/ListGifs.js","services/getGifs.js","context/GifsContext.js","hooks/useGifs.js","Components/Categoria.js","pages/Home/index.js","pages/Detail/index.js","hooks/useGlobalGifs.js","Components/Spinner.js","pages/SearchResult/index.js","context/StaticContex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gifs","id","title","url","className","to","loading","alt","src","ListGifs","gifs","map","key","api_Key","fromApiResponseToGifs","apiResponse","data","Array","isArray","image","images","downsized_medium","getGifs","limit","search","apiURL","fetch","then","res","json","Context","React","createContext","GifsContextProvider","children","useState","setGifs","Provider","value","useGifs","setLoading","useContext","GifsContext","useEffect","localStorage","getItem","setItem","Categoria","name","options","props","singleOption","POPULAR_GIFS","Home","setSearch","useLocation","pushLocation","onSubmit","evt","preventDefault","placeholder","onChange","target","type","Detail","params","gif","find","singleGif","console","log","Spinner","SearchResults","demo","App","StaticContex","logo","component","path","SearchResult","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78fa156c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Link } from 'wouter';\r\nimport '../CSS/Gif.css';\r\n\r\nfunction Gifs({ id, title, url }) {\r\n    return (\r\n        <div className=\"Gif\">\r\n            <Link to={`/gif/${id}`} className='Gif-link'>\r\n                <h3>{title}</h3>\r\n                <img loading='lazy' alt={title} src={url} />\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gifs;\r\n","import React from 'react';\r\nimport Gif from './Gif';\r\nimport '../CSS/ListGifs.css';\r\n\r\nfunction ListGifs({ gifs }) {\r\n\r\n    return <div className='ListGifs'>\r\n        {\r\n            gifs.map(({ id, title, url }) =>\r\n                <Gif\r\n                    key={id}\r\n                    title={title}\r\n                    url={url}\r\n                    id={id} />\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ListGifs;\r\n","const api_Key = 'FdbJxKPfIe8M0TjVcM8c6iMK0HN2NZeP';\r\n\r\nconst fromApiResponseToGifs = apiResponse => {\r\n    const { data = [] } = apiResponse\r\n    if (Array.isArray(data)) {\r\n        const gifs = data.map(image => {\r\n            const { images, title, id } = image\r\n            const { url } = images.downsized_medium\r\n            return { title, id, url }\r\n        })\r\n        return gifs\r\n    }\r\n    return []\r\n}\r\n\r\nexport default function getGifs({ limit = 30, search = 'Luna' } = {}) {\r\n    const apiURL = `https://api.giphy.com/v1/gifs/search?api_key=${api_Key}&q=${search}&limit=${limit}&offset=0&rating=G&lang=en`\r\n\r\n    return fetch(apiURL)\r\n        .then(res => res.json())\r\n        .then(fromApiResponseToGifs)\r\n}","import React, {useState} from 'react'\r\n\r\nconst Context = React.createContext({})\r\n\r\nexport function GifsContextProvider ({children}) {\r\n  const [gifs, setGifs] = useState([])\r\n\r\n  return <Context.Provider value={{gifs, setGifs}}>\r\n    {children}\r\n  </Context.Provider>\r\n}\r\n\r\nexport default Context","import { useContext, useEffect, useState } from \"react\";\r\nimport getGifs from \"../services/getGifs\";\r\nimport GifsContext from '../context/GifsContext'\r\n\r\nfunction useGifs({ search } = { search: null}) {\r\n    const [loading, setLoading] = useState(false)\r\n    const { gifs, setGifs } = useContext(GifsContext)\r\n\r\n    useEffect(function () {\r\n        setLoading(true)\r\n        // recuperamos la search del localStorage\r\n        const searchToUse = search || localStorage.getItem('lastSearch') || 'random'\r\n\r\n        getGifs({ search: searchToUse })\r\n            .then(gifs => {\r\n                setGifs(gifs)\r\n                setLoading(false)\r\n                // guardamos la search en el localStorage\r\n                localStorage.setItem('lastSearch', search)\r\n            })\r\n    }, [search, setGifs])\r\n\r\n    return { loading, gifs }\r\n}\r\n\r\nexport default useGifs;\r\n","import React from 'react'\r\nimport { Link } from 'wouter';\r\nimport '../CSS/Categoria.css';\r\n\r\nfunction Categoria({name, options = [], ...props}) {\r\n    return <div className={props.className}>\r\n        <h3 className=\"Category-title\">{name}</h3>\r\n        <ul className=\"Category-list\">\r\n            {options.map((singleOption) => (\r\n                <li key={singleOption}>\r\n                    <Link\r\n                        className=\"Category-link\"\r\n                        to={`/search/${singleOption}`}\r\n                    >\r\n                        {singleOption}\r\n                    </Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nexport default Categoria;\r\n","import React, { useState } from \"react\";\r\nimport { useLocation } from \"wouter\";\r\nimport ListGifs from '../../Components/ListGifs';\r\nimport useGifs from '../../hooks/useGifs';\r\nimport Categoria from '../../Components/Categoria';\r\n\r\nconst POPULAR_GIFS = [\"Stich\", \"Cat\", \"dog\"]\r\n\r\nexport default function Home() {\r\n  const [search, setSearch] = useState('')\r\n  const [path, pushLocation] = useLocation()\r\n  const { loading, gifs } = useGifs()\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault()\r\n    // navegar a otra ruta\r\n    pushLocation(`/search/${search}`)\r\n  }\r\n\r\n  const handleChange = evt => {\r\n    setSearch(evt.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input placeholder=\"Search a gif here...\" onChange={handleChange} type='text' value={search} />\r\n        <button>Buscar</button>\r\n      </form>\r\n      <div className=\"App-main\">\r\n        <div className=\"App-results\">\r\n          <h3 className=\"App-title\">Última búsqueda</h3>\r\n          <ListGifs gifs={gifs} />\r\n        </div >\r\n        <div className=\"App-categoria\">\r\n        <Categoria\r\n          name=\"Categorias populares\"\r\n          options={POPULAR_GIFS}\r\n        />\r\n        <Categoria\r\n          name=\"Mascotas\"\r\n          options={['Perros', 'Gatos', 'Hamster']}\r\n        />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport Gif from '../../Components/Gif'\r\nimport useGlobalGifs from '../../hooks/useGlobalGifs'\r\n\r\nexport default function Detail ({ params }) {\r\n  const gifs = useGlobalGifs()\r\n\r\n  const gif = gifs.find(singleGif =>\r\n    singleGif.id === params.id\r\n  )\r\n\r\n  console.log(gif)\r\n\r\n  return <Gif {...gif} />\r\n}","import {useContext} from 'react'\r\nimport GifsContext from '../context/GifsContext'\r\n\r\nexport default function useGlobalGifs () {\r\n  return useContext(GifsContext).gifs\r\n}","import React from 'react'\r\n//import '../CSS/Spinner.css';\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div>\r\n            <p>Cargando Gifd, un momento por favor</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;\r\n","import React from 'react'\r\nimport Spinner from '../../Components/Spinner'\r\nimport ListGifs from '../../Components/ListGifs'\r\nimport useGifs from '../../hooks/useGifs'\r\n\r\nexport default function SearchResults ({ params }) {\r\n  const { search } = params\r\n  const { loading, gifs } = useGifs({ search })\r\n\r\n  return <>\r\n    {loading\r\n      ? <Spinner />\r\n      : <>\r\n        <h3 className=\"App-title\">Busqueda: {search}</h3>\r\n        <ListGifs gifs={gifs} />\r\n      </>\r\n    }\r\n  </>\r\n}","import React from 'react'\r\n\r\nconst Context = React.createContext({\r\n    name: 'Sergio',\r\n    demo: true\r\n})\r\n\r\nexport default Context\r\n","import React from 'react';\nimport './App.css';\nimport { Link, Route } from \"wouter\";\nimport Home from './pages/Home/index';\nimport Detail from './pages/Detail/index';\nimport SearchResult from './pages/SearchResult/index';\nimport StaticContext from './context/StaticContex';\nimport { GifsContextProvider } from './context/GifsContext';\nimport logo from './logo.svg'\n\nfunction App() {\n\n  return (\n    <StaticContext.Provider>\n      <div className=\"App\">\n        <section className=\"App-content\">\n          <Link to='/' >\n            <img className='App-logo' alt='Giphy Logo' src={logo} />\n          </Link>\n          <GifsContextProvider>\n          <Route\n            component={Home}\n            path='/'\n          />\n          <Route\n            component={SearchResult}\n            path='/search/:search'\n          />\n\n          <Route\n            component={Detail}\n            path='/gif/:id'\n          />\n          </GifsContextProvider>\n        </section>\n      </div>\n    </StaticContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}